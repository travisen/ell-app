################# INSERT PEOPLE ################# 
INSERT INTO person (first_name, last_name, username, email)
  VALUES ('tony', 'tiger', 'tonyt1', 'tonyt1@email.com');

INSERT INTO person (first_name, last_name, username, email)
  VALUES ('travis', 'nykaza', 'nykazat1', 'traviS.nykaza@gmail.com');

INSERT INTO person (first_name, last_name, username, email)
  VALUES ('jon', 'snow', 'snowj1', 'jon_snow@hotmail.com');

INSERT INTO person (first_name, last_name, username, email)
  VALUES ('sansa', 'stark', 'starks1', 'sstart239@unc.org');


INSERT INTO person (first_name, last_name, username, email)
  VALUES ('eddard', 'stark', 'starke1', 'edrulez@unc.org');

INSERT INTO person (first_name, last_name, username, email)
  VALUES ('denise', 'evans', 'denisee', 'devans23123@yahoo.com');

################# INSERT PLACES ################# 

INSERT INTO place (
    name, place_type, street_address, zipcode,
    description, phone, cost)
    VALUES ( 'nina''s', 'eat', '602 New York St', '18679',
     'A pizza and wings restraunt in Dunmore. Insert more generic text here to test bla bla 23123123.', '15709999999', '$'
);

INSERT INTO place (
    name, place_type, street_address, zipcode,
    description, phone, cost)
    VALUES ( 'nay aug park', 'play', '500 Arthur Ave', '18510',
    'A park in Scranton,PA where you can swim, eat, or have a cookout!',
    '5703484137', 'free'
);

INSERT INTO place (
    name, place_type, street_address, zipcode,
    description, phone, cost)
    VALUES ( 'place2', 'play', '500 Arthur Ave', '18510',
    'A park in Scranton,PA where you can swim, eat, or have a cookout!',
    '5703484137', 'free'
);

INSERT INTO place (
    name, place_type, street_address, zipcode,
    description, phone, cost)
    VALUES ( 'place3', 'play', '500 Arthur Ave', '18510',
    'A park in Scranton,PA where you can swim, eat, or have a cookout!',
    '5703484137', 'free'
);

INSERT INTO place (
    name, place_type, street_address, zipcode,
    description, phone, cost)
    VALUES ( 'place4', 'play', '500 Arthur Ave', '18510',
    'A park in Scranton,PA where you can swim, eat, or have a cookout!',
    '5703484137', 'free'
);

INSERT INTO place (
    name, place_type, street_address, zipcode,
    description, phone, cost)
    VALUES ( 'place5', 'play', '500 Arthur Ave', '18510',
    'A park in Scranton,PA where you can swim, eat, or have a cookout!',
    '5703484137', 'free'
);

INSERT INTO place (
    name, place_type, street_address, city, state, zipcode, country,
    description, phone, cost) VALUES (
    'Generic Place to Shop', 'shop', '800 Awesome Rd', 'New York', 'New York',
    '10001', 'United States', 'a place in nyc to shop!!!!! #$&*(*(#',
    '14449239999', '$$$'
);

################# INSERT ADMIN ################# 


INSERT INTO admin (first_name, last_name, username, password, email)
  VALUES ('Travis', 'Nykaza', 'nykazat1', 'insecuretest',
   'travis.nykaza@gmail.com');

################# INSERT BAD EMAIL TEST ################# 

INSERT INTO person (first_name, last_name, username, email)
  VALUES ('bad', 'bad', 'bat1','travi-__-2-2s.nyk#%#@@@@mail.com');

-- INSERT INTO place (
--     name, place_type, street_address, city, state, zipcode, country,
--     description, phone, cost)

################# ALTERING COLUMNS ################# 

ALTER TABLE place_hours
ALTER COLUMN close_time SET DATA TYPE time;

ALTER TABLE place_hours
ALTER COLUMN close_time SET DATA TYPE time;

ALTER TABLE place_hours ADD CONSTRAINT
constraint_name UNIQUE (day);


DELETE FROM place_hours
WHERE place_hours.id = 2;

################# PLACE HOURS ################# 
INSERT INTO place_hours (
    place_id, day, open_time, close_time)
    VALUES (1, 0, '12:00:00', '20:00:00'),
    (1, 1, '12:00:00', '20:00:00'),
    (1, 2, '15:00:00', '22:00:00'),
    (1, 3, '16:00:00', '22:00:00'),
    (1, 4, '17:00:00', '22:00:00'),
    (1, 5, '18:00:00', '22:00:00'),
    (1, 6, '19:00:00', '22:00:00');

INSERT INTO place_hours (
    place_id, day, open_time, close_time)
    VALUES (2, 0, '10:00:00', '20:00:00'),
    (2, 1, '10:00:00', '20:00:00'),
    (2, 2, '10:00:00', '20:00:00'),
    (2, 3, '10:00:00', '20:00:00'),
    (2, 4, '10:00:00', '20:00:00'),
    (2, 5, '10:00:00', '20:00:00'),
    (2, 6, '10:00:00', '20:00:00');

SELECT open_time, close_time
FROM place_hours
WHERE place_hours.place_id = 1;

################# INSERT VISITS ################# 

INSERT INTO person_visit(
    person_id, place_id, visited_on)
	VALUES(1, 1, '2017-6-17');

INSERT INTO person_visit(
    person_id, place_id, visited_on)
	VALUES(1, 2, '2017-6-24');

INSERT INTO person_visit(
    person_id, place_id, visited_on)
	VALUES(2, 2, '2017-6-24');

#shouldn't add
INSERT INTO person_visit(
    person_id, place_id, visited_on)
	VALUES(2, 2, '2017-6-24');

#Drop all tables in a schema named public
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;
#Restore default grants
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO public;

#################### QUERIES #####################
#Get first 10 enteries with type play
SELECT name, street_address, cost
FROM PLACE
WHERE place_type = 'play'
LIMIT 10;

#Get first 10 enteries with type play starting at row 5
SELECT name, street_address, cost
FROM PLACE
WHERE place_type = 'play'
LIMIT 10 OFFSET 5;

SELECT name, street_address, cost
FROM PLACE
WHERE place_type = 'eat'
LIMIT 10;

SELECT name, street_address, cost
FROM PLACE
WHERE place_type = 'shop'
LIMIT 10;

SELECT name, street_address, cost
FROM PLACE
WHERE place_type = 'other'
LIMIT 10;

#Get Details for a specific place description is 255chars max
SELECT name, description, street_address, city, state, zipcode, cost
FROM PLACE
WHERE place_type = 'play' AND name = 'Nay Aug Park';

#Figure out how to parameterize input to prevent
#sql injection
INSERT INTO place (
    name, place_type, street_address, city, state, zipcode, country,
    description, phone, cost) VALUES (
    '', '', '', '', '',
    '', '', '',
    '', 
);
# Order by most recent first

SELECT *
FROM person_visit
ORDER BY "visited_on" DESC;

# Get first and last name of visitor and where they visited, most recent
SELECT person_visit.id, person.first_name, person.last_name, place.name , person_visit.visited_on
FROM person_visit INNER JOIN
person ON person_visit.person_id = person.id INNER JOIN
place ON person_visit.place_id = place.id
ORDER BY person_visit.visited_on DESC;

#alphabetica asc first name
SELECT person_visit.id, person.first_name, person.last_name, place.name ,person_visit.visited_on
FROM person_visit INNER JOIN
person ON person_visit.person_id = person.id INNER JOIN
place ON person_visit.place_id = place.id
ORDER BY person.first_name ASC;

#alpha asc last name
SELECT person_visit.id, person.first_name, person.last_name, place.name ,person_visit.visited_on
FROM person_visit INNER JOIN
person ON person_visit.person_id = person.id INNER JOIN
place ON person_visit.place_id = place.id
ORDER BY person.last_name ASC;

#Remove visit with id.
#id will be a hidden column
DELETE FROM person_visit
WHERE person_visit.id = 2;

#for ajax on delete ask for table update



#Get Total visits for a particular person and pair with name

#Get Visits Per month

#Get Visits per week

#Get 3 persons with top visits per week/month
SELECT person.first_name, pe
FROM person_visit
ORDER BY "visited_on" DESC;

SELECT person.id, COUNT(person_visit.person_id) AS Visits
FROM person LEFT JOIN
person_visit ON person.id = person_visit.person_id
GROUP BY person.id;


SELECT person.id, person.first_name, COUNT(person_visit.person_id) AS visits
FROM person LEFT JOIN
person_visit ON person.id = person_visit.person_id
GROUP BY person.id
ORDER BY visits DESC;

#Get Top 3 people by number of visits in month 6
#where visits is greater than 0.
#kind of hackish see if better way later
SELECT person.id, person.first_name, COUNT(person_visit.person_id) AS visits
FROM person LEFT JOIN
person_visit ON person.id = person_visit.person_id AND
EXTRACT(MONTH FROM person_visit.visited_on) = 6
GROUP BY person.id
HAVING COUNT(person_visit.person_id) > 0
ORDER BY visits DESC
LIMIT 3;

#Get total scoreboard
SELECT person.id, person.first_name, COUNT(person_visit.person_id) AS visits
FROM person LEFT JOIN
person_visit ON person.id = person_visit.person_id AND
EXTRACT(MONTH FROM person_visit.visited_on) = 6
GROUP BY person.id
HAVING COUNT(person_visit.person_id) > 0
ORDER BY visits DESC;


#Get total monthly visits

CREATE TABLE person_visit(
    id SERIAL UNIQUE,
    person_id INT REFERENCES person(id),
    place_id INT REFERENCES place(id),
    visited_on DATE NOT NULL,
    PRIMARY KEY(person_id, visited_on)
);

### GET person id from name and place id by name
SELECT id from person where first_name='Travis';
SELECT id from place where name='Nay Aug Park';

INSERT INTO person_visit(
    person_id, place_id, visited_on)
    VALUES(
        (SELECT id from person where first_name=$1),
        (SELECT id from place where name=$2),
        $3);